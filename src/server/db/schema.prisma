generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Bedrock built-in models

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @db.Date
  modifiedAt DateTime  @default(now()) @db.Date
  email      String    @unique
  projectIDs String[]  @db.ObjectId
  projects   Project[] @relation(fields: [projectIDs], references: [id])
  name       String?
}

model Project {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now()) @db.Date
  modifiedAt DateTime @default(now()) @db.Date
  userIDs    String[] @db.ObjectId
  users      User[]   @relation(fields: [userIDs], references: [id])
  name       String
  slug       String   @unique

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}

// Item (test)
type Info {
  info1 String?
  info2 String?
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @db.Date
  description String?
  imageUrl    String?
  title       String
  updatedAt   DateTime @default(now()) @db.Date
  url         String?
  info        Info?
}

// Brand
type Address {
  street   String
  city     String
  province String
  cp       Int
  country  String
}

type CommercialAddress {
  address           Address
  commercialContact String
  commercialPhone   Int
}

type DepositAddress {
  address        Address
  depositContact String
  depositPhone   Int
}

type Delivery {
  deliveryTime String
  shipping     String
}

type CommercialCondition {
  minimumPurchase Int
  amountDiscount  Int
  term            Int
  paymentAccepted String
  delivery        Delivery
}

enum CommercialCategory {
  INDUMENTARIA
  BLANQUERIA
  CUIDADO
  VARIOS
}

model Brand {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  registrationDate    DateTime            @default(now()) @db.Date
  brandName           String
  commercialName      String
  taxId               String
  taxCategory         String
  legalAddress        Address
  commercialAddress   CommercialAddress
  depositAddress      DepositAddress
  commercialCondition CommercialCondition
}

// Retail
type FullName {
  firstName String
  lastName  String
}

model Retail {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now()) @db.Date
  updatedAt      DateTime       @default(now()) @db.Date
  supportTicket  String[]
  email          String
  nickname       String
  fullName       FullName
  depositAddress DepositAddress
}

// Order
type OrderProduct {
  id        String
  title     String
  quantity  Int
  unitPrice Float
}

type OrderRetail {
  id       String
  nickname String

}

type OrderBrand {
  id       String
  nickname String
}

type Withholding {
  type String
}

type Payment {
  status      String
  withholding Withholding[]
}

enum orderStatus {
  NEW
  CONFIRMED
  INVOICED
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now()) @db.Date
  updatedAt    DateTime       @default(now()) @db.Date
  orderStatus  orderStatus
  orderProduct OrderProduct[]
  totalAmount  Float
  orderRetail  OrderRetail
  orderBrand   OrderBrand
  payment      Payment
  shippingId   Int
}

// Product
type ReferencePrice {
  avgSellingPrice Float
  markUp          Float
}

type Price {
  originalPrice  Float
  referencePrice ReferencePrice?
}

type ClaimsPolicy {
  acceptsRefund Boolean
}

type TechnicalSpecification {
  description String
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date

  modifiedAt             DateTime               @default(now()) @db.Date
  title                  String
  titleDescription       String
  minQSale               Float
  price                  Price
  claimsPolicy           ClaimsPolicy?
  technicalSpecification TechnicalSpecification
  selledUnits            Int
}

// PreUserBrand

model PreUserBrand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date

  modifiedAt         DateTime @default(now()) @db.Date
  contactMail        String
  contactPhone       Float
  taxId              Float
  commercialCategory CommercialCategory
}
